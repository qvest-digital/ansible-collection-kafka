---
- name: storage | Determine location of meta.properties file for log storage
  ansible.builtin.set_fact:
    kafka_log_dir_meta_properties_file_path: "{{ item }}/meta.properties"

- name: storage | Check if Kafka storage has already been initialized (stat)
  ansible.builtin.stat:
    path: "{{ kafka_log_dir_meta_properties_file_path }}"
  register: kafka_log_dir_meta_properties_file_stat

- name: storage | Slurp meta.properties of log storage
  ansible.builtin.slurp:
    src: "{{ kafka_log_dir_meta_properties_file_path }}"
  register: kafka_log_dir_meta_properties_file_slurped
  when: >-
    kafka_log_dir_meta_properties_file_stat.stat.exists

# We bail out immediately if the log storage exists and belongs to another Node and/or cluster
- name: storage | Check meta.properties of log storage
  ansible.builtin.set_fact:
    kafka_log_dir_meta_properties: "{{ ('[global]\n' + (kafka_log_dir_meta_properties_file_slurped.content | b64decode)) | community.general.from_ini }}"
  when: >-
    kafka_log_dir_meta_properties_file_stat.stat.exists
  failed_when: >-
    ((kafka_log_dir_meta_properties['global']['node.id'] | int) != kafka_server_node_id)
    and (kafka_log_dir_meta_properties['global']['cluster.id'] != kafka_cluster_id)

- name: storage | Ensure log directory exists
  ansible.builtin.file:
    path: "{{ item }}"
    owner: "{{ kafka_system_user_name }}"
    group: "{{ kafka_system_group_name }}"
    mode: u=rw-x+X,g=r-x+X
    recurse: true
    state: directory

- name: storage | Determine if log storages need to be initialized
  changed_when: not kafka_log_dir_meta_properties_file_stat.stat.exists
  ansible.builtin.debug:
    msg: "Log storage {{ item }} has {{ 'not yet ' if not kafka_log_dir_meta_properties_file_stat.stat.exists else 'already' }} been initialized."
  notify:
    - kafka_log_storage_format
    - kafka_restart
